{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**1.Unzip the data**"
      ],
      "metadata": {
        "id": "4_Hn934vhyaY"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8iCsKL_ThrSr",
        "outputId": "07f94edc-3550-4d16-e49d-a6c060896c16"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "unzip:  cannot find or open /content/Flowers-Dataset.zip, /content/Flowers-Dataset.zip.zip or /content/Flowers-Dataset.zip.ZIP.\n"
          ]
        }
      ],
      "source": [
        "!unzip '/content/Flowers-Dataset.zip'"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Import required lib\n",
        "\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator"
      ],
      "metadata": {
        "id": "2-o4gXTUiHqW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**2.Image Augumentation**"
      ],
      "metadata": {
        "id": "y0uoxjiUkCiO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "train_datagen = ImageDataGenerator(rescale=1./255,\n",
        "                                   zoom_range=0.2,\n",
        "                                   horizontal_flip=True)"
      ],
      "metadata": {
        "id": "f8_5Jj7QiaN8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test_datagen = ImageDataGenerator(rescale=1./255)"
      ],
      "metadata": {
        "id": "AdiVG5LsiV6X"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "xtrain = train_datagen.flow_from_directory('/content/flowers',\n",
        "                                           target_size=(64,64),\n",
        "                                           class_mode='categorical',\n",
        "                                           batch_size=100)"
      ],
      "metadata": {
        "id": "Lm5ThLPVikVk",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e54bee47-592a-4f9d-ee54-275a6cd57428"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 4317 images belonging to 5 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3.Create Model**"
      ],
      "metadata": {
        "id": "n6t10DCXkTdD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importing required lib\n",
        "\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Convolution2D,MaxPooling2D,Flatten,Dense"
      ],
      "metadata": {
        "id": "qHWa45H0ixAS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "4.Add Layers (Convolution,MaxPooling,Flatten,Dense-(Hidden\n",
        "Layers),Output) "
      ],
      "metadata": {
        "id": "LgvSe_suktIK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Creating CNN block\n",
        "\n",
        "model = Sequential()\n",
        "model.add(Convolution2D(32,(3,3),activation='relu',input_shape=(64,64,3))) # Convolution layer\n",
        "model.add(MaxPooling2D(pool_size=(2,2))) # Max pooling layer\n",
        "model.add(Flatten()) # Flatten layer\n",
        "# Fully connected layers (ANN)\n",
        "model.add(Dense(300,activation='relu')) # Hidden layer 1\n",
        "model.add(Dense(150,activation='relu')) # Hidden layer 2\n",
        "model.add(Dense(4,activation='softmax')) # Output layer"
      ],
      "metadata": {
        "id": "AsvzKH4si1Kv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**5.Compile the model**"
      ],
      "metadata": {
        "id": "gwa6GJSnk6Vb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "4xRRlILSi27F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**6.Fit The Model**"
      ],
      "metadata": {
        "id": "9k2tdx2TlBpF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.fit_generator(xtrain,\n",
        "                    steps_per_epoch=len(xtrain),\n",
        "                    epochs=10,\n",
        "                    validation_data=xtrain,\n",
        "                    validation_steps=len(xtrain))"
      ],
      "metadata": {
        "id": "bm0Z_YoBi25D"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**7.Save The Model**"
      ],
      "metadata": {
        "id": "avXrZ9FmlHow"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "model.save('Flowers.h5')"
      ],
      "metadata": {
        "id": "bUR-s6wIi23L"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**8.Testing the model**"
      ],
      "metadata": {
        "id": "HKkmo-Rvlhbj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from tensorflow.keras.preprocessing import image"
      ],
      "metadata": {
        "id": "aZSN2odvi21E"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Reading the image\n",
        "\n",
        "img = image.load_img('/content/flowers/rose/102501987_3cdb8e5394_n.jpg',target_size=(64,64))"
      ],
      "metadata": {
        "id": "_8fzec86i2y_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Visualize the image\n",
        "\n",
        "img"
      ],
      "metadata": {
        "id": "dJPyIdr6jQz1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 81
        },
        "outputId": "7edd96cf-df72-402d-8ab2-87f8a4d56719"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=64x64 at 0x7F2A646EA810>"
            ],
            "image/png": "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\n"
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Converting image to array\n",
        "\n",
        "x = image.img_to_array(img)\n",
        "x"
      ],
      "metadata": {
        "id": "nNnK8qX5i2wt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ef9bfee6-cc53-4438-c605-6f0cf2e9fa83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[ 6.,  6.,  4.],\n",
              "        [21., 22., 16.],\n",
              "        [12., 13.,  8.],\n",
              "        ...,\n",
              "        [ 1.,  1.,  0.],\n",
              "        [ 2.,  2.,  0.],\n",
              "        [ 2.,  2.,  0.]],\n",
              "\n",
              "       [[20., 21., 16.],\n",
              "        [ 7.,  7.,  5.],\n",
              "        [22., 23., 18.],\n",
              "        ...,\n",
              "        [ 0.,  0.,  0.],\n",
              "        [ 2.,  2.,  0.],\n",
              "        [ 1.,  1.,  0.]],\n",
              "\n",
              "       [[16., 17., 12.],\n",
              "        [20., 21., 16.],\n",
              "        [11., 12.,  7.],\n",
              "        ...,\n",
              "        [ 1.,  1.,  0.],\n",
              "        [ 1.,  1.,  0.],\n",
              "        [ 1.,  1.,  0.]],\n",
              "\n",
              "       ...,\n",
              "\n",
              "       [[13., 14.,  9.],\n",
              "        [ 9.,  9.,  9.],\n",
              "        [ 6.,  6.,  4.],\n",
              "        ...,\n",
              "        [ 1.,  1.,  0.],\n",
              "        [ 2.,  2.,  0.],\n",
              "        [ 2.,  2.,  0.]],\n",
              "\n",
              "       [[ 5.,  5.,  3.],\n",
              "        [ 7.,  7.,  5.],\n",
              "        [14., 15., 10.],\n",
              "        ...,\n",
              "        [23., 23., 21.],\n",
              "        [ 1.,  1.,  0.],\n",
              "        [ 1.,  1.,  0.]],\n",
              "\n",
              "       [[ 2.,  2.,  0.],\n",
              "        [ 7.,  7.,  5.],\n",
              "        [ 3.,  3.,  1.],\n",
              "        ...,\n",
              "        [22., 22., 20.],\n",
              "        [ 2.,  2.,  0.],\n",
              "        [ 2.,  2.,  0.]]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Expanding dimensions\n",
        "\n",
        "x = np.expand_dims(x,axis=0)\n",
        "x"
      ],
      "metadata": {
        "id": "lha4ewEojRRo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0c07994c-26fd-4223-a654-0eee8ebdc29e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[[[ 6.,  6.,  4.],\n",
              "         [21., 22., 16.],\n",
              "         [12., 13.,  8.],\n",
              "         ...,\n",
              "         [ 1.,  1.,  0.],\n",
              "         [ 2.,  2.,  0.],\n",
              "         [ 2.,  2.,  0.]],\n",
              "\n",
              "        [[20., 21., 16.],\n",
              "         [ 7.,  7.,  5.],\n",
              "         [22., 23., 18.],\n",
              "         ...,\n",
              "         [ 0.,  0.,  0.],\n",
              "         [ 2.,  2.,  0.],\n",
              "         [ 1.,  1.,  0.]],\n",
              "\n",
              "        [[16., 17., 12.],\n",
              "         [20., 21., 16.],\n",
              "         [11., 12.,  7.],\n",
              "         ...,\n",
              "         [ 1.,  1.,  0.],\n",
              "         [ 1.,  1.,  0.],\n",
              "         [ 1.,  1.,  0.]],\n",
              "\n",
              "        ...,\n",
              "\n",
              "        [[13., 14.,  9.],\n",
              "         [ 9.,  9.,  9.],\n",
              "         [ 6.,  6.,  4.],\n",
              "         ...,\n",
              "         [ 1.,  1.,  0.],\n",
              "         [ 2.,  2.,  0.],\n",
              "         [ 2.,  2.,  0.]],\n",
              "\n",
              "        [[ 5.,  5.,  3.],\n",
              "         [ 7.,  7.,  5.],\n",
              "         [14., 15., 10.],\n",
              "         ...,\n",
              "         [23., 23., 21.],\n",
              "         [ 1.,  1.,  0.],\n",
              "         [ 1.,  1.,  0.]],\n",
              "\n",
              "        [[ 2.,  2.,  0.],\n",
              "         [ 7.,  7.,  5.],\n",
              "         [ 3.,  3.,  1.],\n",
              "         ...,\n",
              "         [22., 22., 20.],\n",
              "         [ 2.,  2.,  0.],\n",
              "         [ 2.,  2.,  0.]]]], dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 48
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predicting animal\n",
        "\n",
        "model.predict(x)"
      ],
      "metadata": {
        "id": "fPOjl5EBi2uo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "86098a8c-9760-488f-d2b4-8fac9be79e55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[2.2548706e-04, 8.5826463e-10, 2.6962639e-14, 9.9977452e-01]],\n",
              "      dtype=float32)"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# For visualizing class index\n",
        "\n",
        "xtrain.class_indices"
      ],
      "metadata": {
        "id": "6jywJCD3jRV9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f128eb3c-5ca7-4706-c151-1b980ac55291"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'daisy': 0, 'dandelion': 1, 'rose': 2, 'sunflower': 3, 'tulip': 4}"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predicting and index matching\n",
        "\n",
        "op = ['dandelion','daisy','sunflower','rose','tulip']\n",
        "pred = np.argmax(model.predict(x))\n",
        "op[pred]"
      ],
      "metadata": {
        "id": "-Ud951Z5i2sm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "3f824775-eeab-4e6e-d327-710750a520ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'dandelion'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Testing\n",
        "\n",
        "img = image.load_img('/content/flowers/dandelion/10477378514_9ffbcec4cf_m.jpg',target_size=(64,64))\n",
        "x = image.img_to_array(img)\n",
        "x = np.expand_dims(x,axis=0)\n",
        "pred = np.argmax(model.predict(x))\n",
        "op[pred]"
      ],
      "metadata": {
        "id": "oAd9JNvyjRaP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "outputId": "ef6b93a5-312c-4b64-99c5-670ac880c35e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'dandelion'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 62
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "RHL6r452i2qf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "bwJvHZwujRef"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}